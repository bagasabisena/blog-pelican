<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>My Blog</title><link href="http://www.abisena.me/" rel="alternate"></link><link href="http://www.abisena.me/feeds/all.atom.xml" rel="self"></link><id>http://www.abisena.me/</id><updated>2015-02-20T00:00:00+01:00</updated><entry><title>Progress Tree</title><link href="http://www.abisena.me/progress-tree.html" rel="alternate"></link><updated>2015-02-20T00:00:00+01:00</updated><author><name>Bagas Abisena Swastanto</name></author><id>tag:www.abisena.me,2015-02-20:progress-tree.html</id><summary type="html">&lt;p&gt;It is my final assignment project for data visualization course that I take in my master. I made it with my project partner &lt;strong&gt;Mahesh Nayak&lt;/strong&gt;. We think of an alternative visualization of progress bar. &lt;/p&gt;
&lt;p&gt;Instead of bland, well, bar, we believe that it would be nicer if progress is visualized with something that has emotion. Inspired by a dull, lifeless tree in the winter, we make an metaphor of progress by a growing leaves in a tree at spring season. We hope that the visual metaphor will add emotional feeling to the user and help projects such as fund solicitation or petition campaign. Every contribution to the campaign will be honored as one leaf that grows in the tree.&lt;/p&gt;
&lt;p&gt;It is still not perfect as there are many shortcoming in the design, but is functional. You can view the code on &lt;a href="http://www.github.com/bagasabisena/progress-tree"&gt;github&lt;/a&gt; or on &lt;a href="https://gist.github.com/bagasabisena/58ce73a2b9b8cb49c086"&gt;gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Below is the demo of the tree. You can also view on new window &lt;a href="http://bl.ocks.org/bagasabisena/raw/58ce73a2b9b8cb49c086/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;!-- &lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css"&gt; --&gt;

&lt;style type="text/css"&gt;
/*#content {
    padding-left: 50px;
    padding-top: 100px;
}*/
/*#svgArea {
    display: block;
}*/

div.tooltip {   
  position: absolute;           
  text-align: center;                          
  padding: 5px;  
  color: #fff;           
  font: 12px sans-serif;  
  /*font-weight: bold;      */
  background: rgba(0, 0, 0, 0.9);;   
  border: 2px;      
  border-radius: 10px;           
  pointer-events: none;
  margin: 20px         
}

div.tooltip p{
    text-align: left;
}
div.tooltip h1{
    text-align: left;
}

&lt;/style&gt;

&lt;div class="row"&gt;
    &lt;div class="b" id ="svgArea"&gt;
    &lt;button class="btn btn-primary" id='donate' type="submit"&gt;Donate&lt;/button&gt;
        &lt;button class="btn btn-success" id='animate' type="submit"&gt;Animate&lt;/button&gt;
        &lt;button class="btn btn-danger" id='atonce' type="submit"&gt;At Once&lt;/button&gt;
        &lt;button class="btn btn-info" id='increment' type='submit'&gt;Increment&lt;/button&gt;
        &lt;svg
           xmlns:dc="http://purl.org/dc/elements/1.1/"
           xmlns:cc="http://creativecommons.org/ns#"
           xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
           xmlns:svg="http://www.w3.org/2000/svg"
           xmlns="http://www.w3.org/2000/svg"
           xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
           xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
           width="186.32976"
           height="170.42111"
           id="svg1901"
           sodipodi:version="0.32"
           inkscape:version="0.46+pre4"
           sodipodi:docname="leaf.svg"
           sodipodi:docbase="C:\Important\svg"
           inkscape:output_extension="org.inkscape.output.svg.inkscape"
           version="1.0"&gt;
          &lt;defs&gt;
                &lt;g
                    inkscape:label="Taso 1"
                    inkscape:groupmode="layer"
                    id="layer1"
                    transform="scale(0.1) rotate(132 355 210)"&gt;
                    &lt;path
                        style="fill-rule:evenodd;stroke-width:3.00000024;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
                        d="M 422.27292,632.34394 C 432.85918,616.61295 448.34076,612.0402 448.34076,612.0402 C 448.34076,612.0402 442.54386,606.55398 439.22989,607.84521 C 426.2285,617.56064 419.44945,629.60334 419.44945,629.60334 C 266.27427,623.18356 285.91787,686.20064 265.011,767.7044 C 381.6304,796.72098 433.42735,737.61667 422.27292,632.34394 z"
                        id="path2159"
                        sodipodi:nodetypes="cccccc" /&gt;
                &lt;/g&gt;
          &lt;/defs&gt;
          &lt;sodipodi:namedview
             id="base"
             pagecolor="#ffffff"
             bordercolor="#666666"
             borderopacity="1.0"
             inkscape:pageopacity="0.0"
             inkscape:pageshadow="2"
             inkscape:zoom="0.7"
             inkscape:cx="205.81395"
             inkscape:cy="-68.376196"
             inkscape:document-units="px"
             inkscape:current-layer="layer1"
             gridtolerance="10000"
             inkscape:window-width="1280"
             inkscape:window-height="938"
             inkscape:window-x="-4"
             inkscape:window-y="-4"
             showguides="true"
             inkscape:guide-bbox="true"
             showgrid="false" /&gt;
          &lt;metadata
             id="metadata1906"&gt;
            &lt;rdf:RDF&gt;
              &lt;cc:Work
                 rdf:about=""&gt;
                &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;
                &lt;dc:type
                   rdf:resource="http://purl.org/dc/dcmitype/StillImage" /&gt;
              &lt;/cc:Work&gt;
            &lt;/rdf:RDF&gt;
          &lt;/metadata&gt;
        &lt;/svg&gt;
    &lt;/div&gt;
    &lt;div class="a" id="content"&gt;
        &lt;!-- &lt;h1&gt;Make a change&lt;/h1&gt;
        &lt;p&gt;Save the Children has been working to fight hunger, prevent malnutrition and improve the lives of boys and girls in Africa since 1963. Whether we are working with orphaned children in sub-Saharan Africa or emergency relief for refugees in North Africa, Save the Children strives to meet the needs to vulnerable children and their families with lifesaving and life-changing programs. Charities can make a difference, with a hand-up, not a handout.&lt;/p&gt;

        Please enter your name: &lt;input type="text" class="form-control" id="field-name" name="name"&gt;&lt;br&gt;
        Amount you wish to donate: &lt;input type="text" class="form-control" id="field-amount" name="amount"&gt;&lt;br&gt;

        &lt;button class="btn btn-primary" id='donate' type="submit"&gt;Donate&lt;/button&gt;
        &lt;button class="btn btn-success" id='animate' type="submit"&gt;Animate&lt;/button&gt;
        &lt;button class="btn btn-danger" id='atonce' type="submit"&gt;At Once&lt;/button&gt;
        &lt;button class="btn btn-info" id='increment' type='submit'&gt;Increment&lt;/button&gt; --&gt;
    &lt;/div&gt;

&lt;/div&gt;

&lt;script src="http://d3js.org/d3.v3.min.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"&gt;&lt;/script&gt;

&lt;script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js"&gt;&lt;/script&gt;

&lt;script&gt;

var branches = [];
var leaves = [];
var seedWidth = 75;
var maxDepth = 9;

function degToRad(degree) {
    return degree*Math.PI/180;
}

function radToDeg(radian) {
    return radian*180/Math.PI
}

// transform angle with y axis as a basis. so 0 degree means vertical
function normalizeAngle(rad) {
    return degToRad(90)+rad;
}

// transform angle with x axis as basis like normal polar coordinate
function denormalizeAngle(rad) {
    return rad - degToRad(90);
}

// Tree creation functions
function branch(b) {
    var end = endPt(b), daR, newB, da, dl, aRand, node, id;

    branches.push(b);

    // first branch has 0.5 scaling factor while the other branch 0.8
    if (b.depth &gt;= 0 &amp;&amp; b.depth &lt; 1) {
        dl = 0.5;
    } else {
        dl = 0.75;
    }

    // Randomized length of branch
    lRand = 0.15;
    lRand = Math.random() * (lRand);

    // change the branch angle depending on the depth of the branch
    if (b.depth &lt; 3) {
            da = degToRad(30);
            aRand = degToRad(10);
        } else if (b.depth &lt; 6) {
            da = degToRad(20);
            aRand = degToRad(10);
        } else {
            da = degToRad(20);
            aRand = degToRad(5);
        }

    // stop making new branch on maximum depth and make the last branches indicator for the leaves
    if (b.depth === maxDepth) {
        b.visible = false;
        b.leafId = leaves.length;
        leaves.push(b);
        return;
    }


    // create node array, contains id of branch that has been traversed by the branch
    node = [];
    node.push(b.i);
    node = node.concat(b.node);

    // Left branch
    daR = Math.random() * (aRand + aRand) - aRand; //random angle between -aRand and aRand
    newB = {
        i: branches.length,
        x: end.x,
        y: end.y,
        angle: b.angle + da + daR,
        length: b.length * (dl + lRand),
        depth: b.depth + 1,
        parent: b.i,
        node: node,
        dl: dl,
        da: radToDeg(da),
        aRand: aRand
    };
    branch(newB);

    // Right branch
    daR = Math.random() * (aRand + aRand) - aRand; //random angle between -aRand and aRand
    newB = {
        i: branches.length,
        x: end.x, 
        y: end.y, 
        angle: b.angle - da + daR, 
        length: b.length * (dl + lRand), 
        depth: b.depth + 1,
        parent: b.i,
        node: node,
        dl: dl,
        da: radToDeg(da),
        aRand: aRand
    };
    branch(newB);
}

// compute end point of branch (x2,y2)
function endPt(b) {
    // Return endpoint of branch
    var x = b.x + b.length * Math.cos( normalizeAngle(b.angle) );
    var y = b.y - b.length * Math.sin( normalizeAngle(b.angle) );
    return {x: x, y: y};
}

// define svg for placeholder
var width = 800;
var height = 800;
var svg = d3.select("svg")
            .attr("width", width)
            .attr("height", height)
            .attr('viewBox', '0 0 ' + width + ' ' + height);

// First branch configuration
var seed = {i: 0, x: 10, y: 20, angle: 0, length: 1, depth: 0, node: [], dl:0.5};

// return scaled up of (x1,y1) and (x2,y2) of a branch for svg rendering
function x1(d) {return xScale(d.x);}
function y1(d) {return yScale(d.y);}
function x2(d) {return xScale(endPt(d).x);}
function y2(d) {return yScale(endPt(d).y);}

// show tooltip when mouseover the branch and leaf
function showToolTip(d)
{
    var branchID = d.i;
    var totalAmount = 0;

    //for all leaves =&gt; find leaves with node array containing id == d.id
    leaves.forEach(function(d){
        var index = d.node.indexOf(branchID);

        if (index != -1)
        {
            if (typeof d.amount != 'undefined')
            {
                totalAmount += +d.amount;    
            }
        }
    })

    tooltip.transition().duration(200).style("opacity", 1);      

    tooltip.html("&lt;h4&gt;branch name:"+ d.i + "&lt;/h4&gt;" + "&lt;h4&gt;amount: "+ totalAmount + "&lt;/h4&gt;")  
      .style("left", (d3.event.pageX) + "px")     
      .style("top", (d3.event.pageY - 28) + "px");

    highlightParents(d);
}

// highlight branches on mouseover and mouseout
function highlightParents(d) {
    var colour = d3.event.type === 'mouseover' ? '#CDBA96' : '#470000';
    var depth = d.depth;
    for(var i = 0; i &lt;= depth; i++) {
        d3.select('#id-'+parseInt(d.i)).style('stroke', colour);
        d = branches[d.parent];
    }   
}

// hightlight leaf to green on mouseover while keep the other leaf greyed out
function highlightLeaf(d,i) {
    svg.selectAll('use')
        .style('fill', 'grey');

    svg.select('use#id-'+ i)
        .style('fill', 'green');
} 

// the process of making branches. Will stop at maxDepth
branch(seed);

// scaling depend on the width and height of svg
var xMax = Math.max.apply(null, branches.map(function(element){return element.x}));
var xMin = Math.min.apply(null, branches.map(function(element){return element.x}));
var yMax = Math.max.apply(null, branches.map(function(element){return element.y}));
var yMin = Math.min.apply(null, branches.map(function(element){return element.y}));

// an ugly hack to leave room for leave to grow inside the svg container
// so that the leaf is not cut out of the svg
var leafWidth = 0.8;

var xScale = d3.scale.linear()
        .domain([xMin-leafWidth, xMax+leafWidth])
        .range([0, width]);

var yScale = d3.scale.linear()
        .domain([yMin-leafWidth, yMax+leafWidth])
        .range([0, height]);

// svg rendering of the branches
svg.selectAll('line')
    .data(branches)
    .enter()
    .append('line')
    .attr('x1', x1)
    .attr('y1', y1)
    .attr('x2', x2)
    .attr('y2', y2)
    .attr('stroke', '#470000')
    .style('stroke-width', function(d){
        var x2 = xScale(endPt(d).x);
        var y2 = yScale(endPt(d).y);
        var x1 = xScale(d.x);
        var y1 = yScale(d.y);
        var length = Math.pow(Math.pow((x2-x1),2)+Math.pow((y2-y1),2),0.5);
        var width = treeWidth(length,d.depth);
        return width &lt; 1 ? parseInt(1) + 'px' : parseInt(width) + 'px';
    })
    .style('stroke-linecap', 'round')
    .attr('id', function(d) {return 'id-'+d.i;})
    .on('mouseover', showToolTip)
    .on("mouseout", function(d) {       
            tooltip.transition()        
                .duration(500)      
                .style("opacity", 0);
                highlightParents(d);
            });

// change this number to change the size of the leaf
leafScale(1);

// add tooltip to page
var tooltip = d3.select("body").append("div")   
    .attr("class", "tooltip")               
    .style("opacity", 0);

// svg rendering of leaf
svg.selectAll('use')
    .data(leaves)
    .enter()
    .append('use')
    .attr('x', x2)
    .attr('y', y2)
    .attr('id', function(d,i){return 'id-' + i})
    .attr('transform', function(d){ return 'rotate(' + radToDeg(-d.angle) + ' ' + xScale(endPt(d).x) + ' ' + yScale(endPt(d).y) + ')';})
    .attr("xlink:href", "#layer1")
    .attr('style', 'fill:green;stroke:black')
    .attr('visibility', function(d){
         return d.visible ? 'visible' : 'hidden'
    })
    .on("mouseover", function(d,i) {      
        tooltip.transition().duration(200).style("opacity", 1);      
        tooltip.html("&lt;h4&gt;name:         "+ d.name + "&lt;/h4&gt;" + "&lt;h4&gt;amount: "+ d.amount + "&lt;/h4&gt;")  
          .style("left", (d3.event.pageX) + "px")     
          .style("top", (d3.event.pageY - 28) + "px");
          highlightLeaf(d,i);
    })
    .on("mouseout", function(d) {       
            tooltip.transition()        
                .duration(500)      
                .style("opacity", 0);   
            svg.selectAll('use')
                .style('fill', 'green');
            });

// another hack to hide rounded line of first branch (the trunk)
var trunk = branches[0];
svg.append('rect')
    .attr('height', getLength(trunk)*0.3)
    .attr('width', width)
    .attr('x', 0)
    .attr('y', yScale(trunk.y))
    .attr('fill', 'white');

// handle click event of buttons
d3.select('#donate').on('click', update);
d3.select('#animate').on('click', animate);
d3.select('#atonce').on('click', atonce);
d3.select('#increment').on('click', incrementalFill);

function update() {

    console.log('btn clicked')
    var name = $('#field-name').val();
    var amount = $('#field-amount').val();

    var leavesCopy = leaves.map(function(d){return d.leafId});
    console.log(leavesCopy)

    var randIndex = Math.random() * leavesCopy.length;
    randIndex = Math.floor(randIndex);

    var removed = leavesCopy.splice(randIndex, 1)[0];

    leaves[removed].visible = true;

    leaves[removed].name = name;
    leaves[removed].amount = amount;

    svg
        .select('use#id-' + removed)
        //.data(leaves)
        .transition()
        .delay(200)
        .attr('visibility', function(d){return d.visible ? 'visible' : 'hidden'});
}


function randomFill()
{
    var halfFull = leaves.length / 4;

    for (i = 0; i &lt; halfFull; i++)
    {
        var randIndex = Math.random() * leaves.length;
        randIndex = Math.round(randIndex);

        leaves[randIndex].visible = true;

        leaves[randIndex].name = "name";
        leaves[randIndex].amount = "amount";
        console.log(leaves[numOfClick]);

        svg
            .select('use')
            //.data(leaves)
            .transition()
            .attr('visibility', function(d){return d.visible ? 'visible' : 'hidden'});
        }
}

var increment = 0;
var leavesCopy = leaves.map(function(d){return d.leafId});
var quarter = leavesCopy.length*0.25;

function incrementalFill() {
    increment++;

    console.log(quarter);
    console.log(leavesCopy.length);

    for (i=0;i&lt;quarter;i++) {
        var randIndex = Math.random() * leavesCopy.length;
        randIndex = Math.floor(randIndex);
        var removed = leavesCopy.splice(randIndex, 1)[0];
        leaves[removed].visible = true;
    }

    svg.selectAll('use')
        .transition()
        .attr('visibility', function(d){return d.visible ? 'visible' : 'hidden'});


}

function animate() {
    for (i = 0; i &lt; leaves.length; i++) {
        setTimeout(function(i) {
            leaves[i].visible = true;
            svg
                .selectAll('use#id-'+i)
                .data(leaves)
                .transition()
                .attr('visibility', function(d){return d.visible ? 'visible' : 'hidden'});
        }, 100, i);


    }
}

function atonce() {
    leaves.forEach(function(d){
        d.visible = true;
    })
    svg
        .selectAll('use')
        .data(leaves)
        .transition()
        .attr('visibility', function(d){return d.visible ? 'visible' : 'hidden'});
}

function leafScale(scale) {
    d3.select('g#layer1')
        .attr('transform', 'scale(' + scale*0.1 + ') rotate(132 355 210)');
}

function treeWidth(length,depth) {
    return depth === 0 ? (0.4059*length-8.1419)*0.73 : 0.4059*length-8.1419;
}

function getLength(branch) {
    var x2 = xScale(endPt(branch).x);
    var y2 = yScale(endPt(branch).y);
    var x1 = xScale(branch.x);
    var y1 = yScale(branch.y);
    return Math.pow(Math.pow((x2-x1),2)+Math.pow((y2-y1),2),0.5);
}

&lt;/script&gt;</summary><category term="data visualization"></category><category term="d3.js"></category></entry><entry><title>Rumpy, a (Supposedly) Multiplatform Chat App</title><link href="http://www.abisena.me/rumpy.html" rel="alternate"></link><updated>2015-01-30T00:00:00+01:00</updated><author><name>Bagas Abisena Swastanto</name></author><id>tag:www.abisena.me,2015-01-30:rumpy.html</id><summary type="html">&lt;p&gt;Rumpy is a hobby project that I developed as an escape from a boring on-the-job training back in 2012. The name Rumpy was chosen from Indonesian word 'rumpi' which means chit-chat. It was my first programming project that I did while I was learning to code. I always wanted to know how to program, so it was the perfect time to start. &lt;/p&gt;
&lt;p&gt;2012 was a time where Blackberry and its Messenger app took reign in Indonesia. It got me thinking for some time, why don't we roll-out our own version of chat service? Why should we rely on others infrastructure and pay monthly cost to them? Those naive idealistic thoughts drove me to the idea of a multiplatform chat service for my first coding project, and so Rumpy was born.&lt;/p&gt;
&lt;p&gt;In order to make chat service, you need to develop three things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, of course the app. The idea is multiplatform, so, client application for Android and iOS are mandatory.&lt;/li&gt;
&lt;li&gt;Second, the server. It has to be able to pass message between users.&lt;/li&gt;
&lt;li&gt;Lastly, the protocol. The client and server have to talk with a mutual understanding.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It sounds simple in my head but when it comes to actual implementation, it is a whole different level. &lt;/p&gt;
&lt;p&gt;Building a good Android app alone is delicate enough especially when you are still scratching your head from learning data structure, OOP, design pattern, and so on while fixing the error on syntax. Then you have to design and develop the server which is far more complex than the app. &lt;/p&gt;
&lt;p&gt;At the end the project was, well.. unfinished. No, it is not worth &lt;a href="http://time.com/3477028/facebook-whatsapp-19-billion-dollar-deal/"&gt;$20 billion like WhatsApp&lt;/a&gt;. The app didn't even arrive at Google Play. But wait, wait! Don't leave my blog just yet. At least it is not for nothing, okay.&lt;/p&gt;
&lt;p&gt;Rumpy did work at some level. Through the android app I could send message back and forth (as long as the server is up). And it also had delivered and read receipt which was a big deal at the time. Don't believe me? I have the screenshots (and the code) below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/rumpy/splash.jpg" /&gt;
&lt;img alt="" src="/images/rumpy/screenshot2.png" /&gt;
&lt;img alt="" src="/images/rumpy/screenshot3.png" /&gt;&lt;/p&gt;
&lt;p&gt;Then I took Rumpy to the national startup competition &lt;a href="https://www.techinasia.com/imulai-4-jakarta/"&gt;iMULAI 4.0&lt;/a&gt; with my friend &lt;a href="http://www.twitter.com/stanggasta"&gt;Mohammad Anggasta&lt;/a&gt;. We thought maybe the idea and the prototype was not bad. And turned out we got into the &lt;a href="https://twitter.com/IMULAI/status/205503584291397634"&gt;best 50 ideas&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;So, in the end, I gained so much from Rumpy. My TU Delft Professor always put this sentence at the cover of exam paper.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Make clear in your answer how you reach the final result; the road to the answer is very important.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Learning is not always about result. Process is also important. Rumpy not only given me the experience (and taught me the &lt;a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY&lt;/a&gt; principle), but also the satisfaction you get when you do something meaningful.&lt;/p&gt;
&lt;p&gt;The take home message for myself: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Creating something is fun. So let's start making the idea into reality. The worst thing I can get from it is that I learn.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thank you for reading!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;BTW i have uploaded the source code to github. For those who interested feel free to check from links below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bagasabisena/RumpyServerWS"&gt;Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bagasabisena/RumpyClient"&gt;Android client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bagasabisena/Stanza"&gt;Protocol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="android"></category><category term="java"></category><category term="programming"></category></entry><entry><title>Distribution of Indonesian Student in the Netherlands</title><link href="http://www.abisena.me/student.html" rel="alternate"></link><updated>2014-11-29T00:00:00+01:00</updated><author><name>Bagas Abisena Swastanto</name></author><id>tag:www.abisena.me,2014-11-29:student.html</id><summary type="html">&lt;p&gt;Well, wise man says that first blog post should be meaningful, so here I am. Below is a simple visualization built on &lt;a href="https://www.d3js.org"&gt;awesome D3.js&lt;/a&gt;. It shows the distribution of Indonesian student in cities of Netherlands in the year of 2013. Please note that I don't own the data. The data is made by PPI Belanda (Indonesian Student Union in the Netherlands). Big thanks to Arip Muttaqien for giving me the permission to use the data. Here goes! (Oh btw you can hover the cursor on the bubble and it will show you the real percentage and the universities where the students study).&lt;/p&gt;
&lt;style&gt;
    .place-label {
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        font-size: 10px;
        fill: #444;
    }

    .place {
        fill: #444;
    }

    .d3-tip {
      line-height: 1;
      font-weight: bold;
      padding: 12px;
      background: rgba(250, 250, 250, 0.8);
      color: #000;
      border-radius: 2px;
      pointer-events: none;
    }

    /* Creates a small triangle extender for the tooltip */
    .d3-tip:after {
      box-sizing: border-box;
      display: inline;
      font-size: 10px;
      width: 100%;
      line-height: 1;
      color: rgba(250, 250, 250, 0.8);
      position: absolute;
      pointer-events: none;
    }

    /* Northward tooltips */
    .d3-tip.n:after {
      content: "\25BC";
      margin: -1px 0 0 0;
      top: 100%;
      left: 0;
      text-align: center;
    }

    /* Eastward tooltips */
    .d3-tip.e:after {
      content: "\25C0";
      margin: -4px 0 0 0;
      top: 50%;
      left: -8px;
    }

    /* Southward tooltips */
    .d3-tip.s:after {
      content: "\25B2";
      margin: 0 0 1px 0;
      top: -8px;
      left: 0;
      text-align: center;
    }

    /* Westward tooltips */
    .d3-tip.w:after {
      content: "\25B6";
      margin: -4px 0 0 -1px;
      top: 50%;
      left: 100%;
    }

&lt;/style&gt;

&lt;div id="example"&gt;&lt;/div&gt;

&lt;script src="http://d3js.org/d3.v3.min.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="/js/topojson.v1.min.js"&gt;&lt;/script&gt;

&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"&gt;&lt;/script&gt;

&lt;script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js"&gt;&lt;/script&gt;

&lt;script src="/js/tip.js"&gt;&lt;/script&gt;

&lt;script src="/js/mustache.js"&gt;&lt;/script&gt;

&lt;script src="http://d3js.org/topojson.v1.min.js"&gt;&lt;/script&gt;

&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"&gt;&lt;/script&gt;

&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/d3-tip/0.6.3/d3-tip.min.js"&gt;&lt;/script&gt;

&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/mustache.js/0.8.1/mustache.min.js"&gt;&lt;/script&gt;

&lt;script id="template" type="x-tmpl-mustache"&gt;
    &lt;div class="tip-container"&gt;
        &lt;p style="font-size:80%"&gt;{{name}}: {{percent}}%&lt;/p&gt;
        {{#uni_name}}
        &lt;p style="font-size: 60%"&gt;{{.}}&lt;/p&gt;
        {{/uni_name}}
    &lt;/div&gt;
&lt;/script&gt;

&lt;script&gt;

    var template = $('#template').html();
    Mustache.parse(template);

    var tip = d3.tip()
        .attr('class', 'd3-tip')
        .direction(function(d){
            if (d.name == 'Delft' || d.name == "Rotterdam" || d.name == "Tilburg") {
                return "sw"
            } else {
                return "ne"
            }
        })
        .html(function(d) {
            return Mustache.render(template, d);
        });

    var width = 960;
    var height = 780;

    var svg = d3.select('div#example').append('svg')
        .attr('width', width)
        .attr('height', height);

    svg.call(tip);

    var projection = d3.geo.mercator()
        .center([6.5,53.5])
        .scale(8500)
        .translate([width / 2, length / 3]);

    d3.json('/data/nld.json', function(err, nld) {
        if (err) return console.log(err);

        var subunits = topojson.feature(nld, nld.objects.subunits);

        var path = d3.geo.path()
            .projection(projection)
            .pointRadius(2);

        svg.append('path')
            .datum(subunits)
            .attr('d', path)
            .attr('fill', '#f0f0f0');

        d3.csv('/data/city.csv', function(error, data) {

            data.forEach(function(d){
                d.name = d.name;
                d.lat = +d.lat;
                d.long = +d.long;
                d.percent = +d.percent;
                d.uni_name = d.uni_name.split("|");
                d.uni_percent = d.uni_percent.split("|");
                for (var i = d.uni_name.length - 1; i &gt;= 0; i--) {
                    d.uni = {uni_name: d.uni_name, uni_percent: d.uni_percent};
                };
            })

            var color = d3.scale.category20();
            var radiusScale = d3.scale.linear()
                .domain(d3.extent(data, function(d){return d.percent}))
                .range([5,30])

            svg.append('g')
                .attr('class', 'places')
                .selectAll("circle")
                .data(data)
                .enter()
                .append('circle')
                    .attr('class','place')
                    .attr('cx',function(d){return projection([d.long, d.lat])[0]})
                    .attr('cy',function(d){return projection([d.long, d.lat])[1]})
                    .attr('r', function(d){return radiusScale(d.percent)})
                    .style('fill', function(d){return color(d.name);})
                    .on('mouseover', function(d){
                        var radius = radiusScale(d.percent);
                        d3.select(this)
                            .attr('r', radius)
                            .transition()
                            .duration(250)
                            .attr('r', 1.2*radius)

                        tip.show(d);
                            // .transition()
                            // .duration(500)
                            // .attr('r', radius)
                            // .transition()
                            // .duration(500)
                            // .attr('r', 1.5*radius)
                            // .transition()
                            // .duration(500)
                            // .attr('r', radius)
                    })
                    .on('mouseout', function(d){
                        var radius = radiusScale(d.percent);
                        d3.select(this)
                            .transition()
                            .duration(250)
                            .attr('r',radius)

                        tip.hide(d);
                    });

            svg.select('g.places')
                .selectAll('.place-label')
                .data(data)
                .enter()
                .append('text')
                    .attr("class", "place-label")
                    .attr("transform", function(d) {return "translate(" + projection([d.long, d.lat]) + ")"; })
                    .attr("dy", ".35em")
                    .attr('dx', '1.2em')
                    .text(function(d) { return d.name; });


        });



    });



&lt;/script&gt;</summary><category term="data visualization"></category><category term="d3.js"></category></entry></feed>